import { useState } from 'react'
import {
	Link,
	Route,
	BrowserRouter as Router,
	Routes,
	useNavigate,
	useParams,
} from 'react-router'
import './index.css'
import { Users, updateUsersData } from './userData'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
const Watermark = () => {
	const patterns = ['‚õõ', '‚ØÄ', '‚ØÅ', '‚úß', '‚ú¶', '‚ú∂', '‚ùÇ', '‚ú∫', '‚úº', '‚ùÄ']

	const getRandomPattern = () => {
		return patterns[Math.floor(Math.random() * patterns.length)]
	}

	return (
		<div className='watermark'>
			{Array.from({ length: 50 }).map((_, i) => (
				<span
					key={i}
					className='watermark-pattern'
					style={{
						left: `${Math.random() * 100}%`,
						top: `${Math.random() * 100}%`,
						transform: `rotate(${Math.random() * 360}deg)`,
						fontSize: `${Math.random() * 30 + 10}px`,
						color: `hsl(${Math.random() * 360}, 70%, 60%)`,
					}}
				>
					{getRandomPattern()}
				</span>
			))}
		</div>
	)
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã 404
function NotFoundPage() {
	const navigate = useNavigate()

	return (
		<div className='not-found-container'>
			<Watermark />
			<h1>404</h1>
			<p>–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
			<button onClick={() => navigate('/')} className='back-to-main'>
				–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
			</button>
		</div>
	)
}

function Leaderboard() {
	const [searchTerm, setSearchTerm] = useState('')

	const filteredUsers = Users.filter(user =>
		user.fullName.toLowerCase().includes(searchTerm.toLowerCase())
	)

	const handleUpdateUsers = () => {
		const updatedUsers = Users.map(user => ({
			...user,
			exp: String(Number(user.exp) + 10),
		}))
		updateUsersData(updatedUsers)
		window.location.reload()
	}

	return (
		<div className='app-container'>
			<Watermark />
			<header className='header'>
				<button
					className='back-button'
					onClick={() =>
						(window.location.href = 'https://it-course-six.vercel.app/')
					}
				>
					‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é
				</button>
				<h1 className='page-title' style={{ marginRight: '20px' }}>
					üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
				</h1>
				<button className='update-button' onClick={handleUpdateUsers}>
					–û–±–Ω–æ–≤–∏—Ç—å
				</button>
			</header>

			<div className='search-container'>
				<input
					type='text'
					placeholder='–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏...'
					value={searchTerm}
					onChange={e => setSearchTerm(e.target.value)}
					className='search-input'
				/>
			</div>

			<div className='users-grid'>
				{filteredUsers.length > 0 ? (
					filteredUsers.map((user, index) => (
						<Link to={`/user/${user.id}`} className='user-card' key={user.id}>
							<div className='user-rank'>#{index + 1}</div>
							<div className='user-avatar'>{user.avatar}</div>
							<div className='user-info'>
								<h3>{user.fullName}</h3>
								<div className='exp-container'>
									<div className='exp-bar'>
										<div
											className='exp-progress'
											style={{ width: `${user.progress}%` }}
										></div>
									</div>
									<span className='exp-value'>{user.exp} XP</span>
								</div>
							</div>
						</Link>
					))
				) : (
					<div className='no-results'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
				)}
			</div>
		</div>
	)
}

function UserProfile() {
	const { id } = useParams()
	const navigate = useNavigate()
	const user = Users.find(u => u.id === parseInt(id))

	if (!user) {
		return (
			<div className='app-container'>
				<Watermark />
				<header className='header'>
					<button className='back-button' onClick={() => navigate(-1)}>
						‚Üê –ù–∞–∑–∞–¥
					</button>
					<h1 className='page-title'>–û—à–∏–±–∫–∞</h1>
				</header>
				<div className='profile-content'>
					<div className='user-not-found'>
						<h2>–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</h2>
						<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ</p>
						<button onClick={() => navigate('/')} className='back-to-main'>
							–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
						</button>
					</div>
				</div>
			</div>
		)
	}

	return (
		<div className='app-container'>
			<Watermark />
			<header className='header'>
				<button className='back-button' onClick={() => navigate(-1)}>
					‚Üê –ù–∞–∑–∞–¥
				</button>
				<h1 className='page-title'>–ü—Ä–æ—Ñ–∏–ª—å</h1>
			</header>

			<div className='profile-content'>
				<div className='profile-header'>
					<div className='avatar-container'>
						<div className='profile-avatar'>{user.avatar}</div>
						<div className='level-badge'>{user.level}</div>
					</div>
					<div className='profile-main-info'>
						<h2 className='profile-name'>{user.fullName}</h2>
						<div className='profile-stats'>
							<div className='stat-item'>
								<div className='stat-value'>{user.exp}</div>
								<div className='stat-label'>XP</div>
							</div>
							<div className='stat-item'>
								<div className='stat-value'>{user.achievements.length}</div>
								<div className='stat-label'>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div>
							</div>
						</div>
					</div>
				</div>

				<div className='progress-container'>
					<div className='progress-info'>
						<span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
						<span>{user.progress}%</span>
					</div>
					<div className='progress-bar'>
						<div
							className='progress-fill'
							style={{ width: `${user.progress}%` }}
						></div>
					</div>
				</div>

				<div className='profile-section'>
					<h3 className='section-title'>–û–±–æ –º–Ω–µ</h3>
					<p className='about-text'>{user.about}</p>
				</div>

				<div className='profile-section'>
					<h3 className='section-title'>–ù–∞–≤—ã–∫–∏</h3>
					<div className='skills-container'>
						{user.skills.map((skill, index) => (
							<span key={index} className='skill-tag'>
								{skill}
							</span>
						))}
					</div>
				</div>

				<div className='profile-section'>
					<h3 className='section-title'>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
					<div className='achievements-grid'>
						{user.achievements.map((achievement, index) => (
							<div key={index} className='achievement-card'>
								<div className='achievement-icon'>üèÖ</div>
								<div className='achievement-text'>{achievement}</div>
							</div>
						))}
					</div>
				</div>
			</div>
		</div>
	)
}

function App() {
	return (
		<Router>
			<Routes>
				<Route path='/' element={<Leaderboard />} />
				<Route path='/user/:id' element={<UserProfile />} />
				<Route path='*' element={<NotFoundPage />} />
			</Routes>
		</Router>
	)
}

export default App
